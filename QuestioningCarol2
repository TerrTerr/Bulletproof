<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Improv Comedy Scene</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            text-align: center;
        }
        #chat-container {
            margin-top: 20px;
        }
        #chat-box {
            height: 300px;
            border: 1px solid #ccc;
            overflow-y: auto;
            padding: 10px;
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
        }
        .message {
            border-radius: 10px;
            padding: 10px;
            margin: 5px 0;
            max-width: 80%;
            word-wrap: break-word;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
        }
        .assistant-message {
            background-color: #00ffff;
            align-self: flex-start;
        }
        #user-input {
            width: calc(100% - 20px);
            padding: 10px;
        }
        #send-button {
            padding: 10px;
        }
        #suggestionButton {
            font-size: 20px;
            padding: 10px 20px;
            margin-left: auto;
            margin-right: auto;
            display: block;
        }
        #suggestion {
            font-size: 24px;
            margin-top: 20px;
        }
        .toggle-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }
        .toggle-buttons {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        .toggle-buttons label {
            cursor: pointer;
            padding: 3px 8px;
            border: 1px solid #ccc;
            margin-bottom: 5px;
            border-radius: 5px;
            font-size: 12px;
        }
        .toggle-buttons input[type="checkbox"] {
            display: none;
        }
        .toggle-buttons input[type="checkbox"]:checked + label {
            background-color: blue;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="toggle-container">
            <div class="toggle-buttons">
                <input type="checkbox" id="userToggle" checked>
                <label for="userToggle">You Initiate</label>
                <input type="checkbox" id="carolToggle">
                <label for="carolToggle">Questioning Carol Initiates</label>
            </div>
        </div>
        <button id="suggestionButton">Get Suggestion</button>
        <p id="suggestion"></p>
        <div id="chat-container">
            <div id="chat-box"></div>
            <input type="text" id="user-input" placeholder="Type your message here...">
            <button id="send-button">Send</button>
        </div>
    </div>

    <script>
        let suggestions = [];
        let initialPrompt;
        let startTime;

        document.addEventListener('DOMContentLoaded', function() {
            fetch('https://raw.githubusercontent.com/TerrTerr/Initiation_Practice2/main/suggestions.csv')
                .then(response => response.text())
                .then(data => {
                    suggestions = data.split('\n').slice(1).map(line => line.trim());
                })
                .catch(error => console.error('Error fetching suggestions:', error));
        });

        document.getElementById('suggestionButton').addEventListener('click', function() {
            if (suggestions.length > 0) {
                const randomIndex = Math.floor(Math.random() * suggestions.length);
                const suggestion = suggestions[randomIndex];
                document.getElementById('suggestion').innerText = suggestion;
                initialPrompt = `You are an improv character in a comedy scene. Your role is to ask questions as often as every other line or more. Follow all other improv best practices by playing grounded, being pithy, listening and responding/reacting, helping establish where the scene is happening and between who. Mix some statements in between your questions. The best questions are open-ended. Begin the conversation with an open-ended question. Respond only with your side of the conversation. Here is the suggestion: ${suggestion}`;
                startTime = new Date();

                if (document.getElementById('carolToggle').checked) {
                    sendMessage(suggestion, false);
                }
            } else {
                console.log('No suggestions available');
            }
        });

        const sendMessage = async (message, displayMessage = true) => {
            const chatBox = document.getElementById('chat-box');
            if (displayMessage) {
                const userMessageElement = document.createElement('div');
                userMessageElement.className = 'message user-message';
                userMessageElement.innerText = message;
                chatBox.appendChild(userMessageElement);
            }

            const response = await fetch('https://improvaise.glitch.me/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: initialPrompt + "\nUser: " + message })
            });

            const data = await response.json();
            const assistantMessage = data.choices[0].message.content.replace('Assistant: ', '');

            const assistantMessageElement = document.createElement('div');
            assistantMessageElement.className = 'message assistant-message';
            assistantMessageElement.innerText = assistantMessage;
            chatBox.appendChild(assistantMessageElement);

            chatBox.scrollTop = chatBox.scrollHeight;
        };

        document.getElementById('send-button').addEventListener('click', () => {
            const userMessage = document.getElementById('user-input').value;
            if (!userMessage) return;
            document.getElementById('user-input').value = '';
            sendMessage(userMessage);
        });

        document.getElementById('userToggle').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('carolToggle').checked = false;
            } else {
                document.getElementById('carolToggle').checked = true;
            }
        });

        document.getElementById('carolToggle').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('userToggle').checked = false;
            } else {
                document.getElementById('userToggle').checked = true;
            }
        });
    </script>
</body>
</html>
