<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Improv Suggestions</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            text-align: center;
        }
        table {
            margin: 20px auto;
            width: 80%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
            font-size: 18px;
        }
        th {
            width: 20%;
        }
        th:nth-child(2) {
            width: 70%;
        }
        th:nth-child(3) {
            width: 10%;
        }
        th:nth-child(4) {
            width: 10%;
        }
    </style>
</head>
<body>
    <div class="container">
        <button id="suggestionButton" style="font-size: 20px; padding: 10px 20px;">Get Suggestion</button>
        <p id="suggestion" style="font-size: 24px; margin-top: 20px;"></p>
        <input type="text" id="dialogueInput" placeholder="Type your line of dialogue..." style="font-size: 18px; padding: 10px; width: 80%; margin-top: 20px;">
        <table id="suggestionsTable">
            <thead>
                <tr>
                    <th>Suggestion</th>
                    <th>Initiation</th>
                    <th>Time</th>
                    <th>Evaluate</th>
                </tr>
            </thead>
            <tbody id="suggestions"></tbody>
        </table>
        <div id="evaluationResult" style="margin-top: 20px; font-size: 18px;"></div>
    </div>

    <script>
        let suggestions = [];
        let startTime;

        // Fetch the CSV file and parse it
        document.addEventListener('DOMContentLoaded', function() {
            fetch('https://raw.githubusercontent.com/TerrTerr/Initiation_Practice2/main/suggestions.csv')
                .then(response => response.text())
                .then(data => {
                    console.log('CSV data fetched:', data);
                    suggestions = data.split('\n').slice(1).map(line => line.trim()); // Parse CSV data
                    console.log('Parsed suggestions:', suggestions);
                })
                .catch(error => console.error('Error fetching suggestions:', error));
        });

        document.getElementById('suggestionButton').addEventListener('click', function() {
            console.log('Suggestion button clicked');
            if (suggestions.length > 0) {
                const randomIndex = Math.floor(Math.random() * suggestions.length);
                const suggestion = suggestions[randomIndex];
                console.log('Selected suggestion:', suggestion);
                document.getElementById('suggestion').innerText = suggestion;
                startTime = new Date();  // Start the timer
            } else {
                console.log('No suggestions available');
            }
        });

        document.getElementById('dialogueInput').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                const suggestion = document.getElementById('suggestion').innerText;
                const dialogue = event.target.value;
                if (suggestion && dialogue) {
                    const endTime = new Date();
                    let timeTaken = Math.round((endTime - startTime) / 1000); // Calculate time taken in seconds and round to the nearest whole number
                    
                    let minutes = Math.floor(timeTaken / 60);
                    let seconds = timeTaken % 60;
                    let timeDisplay = seconds + ' sec';
                    if (minutes > 0) {
                        timeDisplay = minutes + ' min, ' + timeDisplay;
                    }

                    const tableBody = document.getElementById('suggestions');
                    const row = document.createElement('tr');
                    const suggestionCell = document.createElement('td');
                    const dialogueCell = document.createElement('td');
                    const timeCell = document.createElement('td');
                    const evaluateCell = document.createElement('td');
                    const evaluateButton = document.createElement('button');

                    suggestionCell.style.border = '1px solid #ccc';
                    suggestionCell.style.padding = '10px';
                    suggestionCell.style.fontSize = '18px';
                    suggestionCell.style.width = '20%';

                    dialogueCell.style.border = '1px solid #ccc';
                    dialogueCell.style.padding = '10px';
                    dialogueCell.style.fontSize = '18px';
                    dialogueCell.style.width = '70%';

                    timeCell.style.border = '1px solid #ccc';
                    timeCell.style.padding = '10px';
                    timeCell.style.fontSize = '18px';
                    timeCell.style.width = '10%';

                    evaluateCell.style.border = '1px solid #ccc';
                    evaluateCell.style.padding = '10px';
                    evaluateCell.style.fontSize = '18px';
                    evaluateCell.style.width = '10%';

                    suggestionCell.innerText = suggestion;
                    dialogueCell.innerText = dialogue;
                    timeCell.innerText = timeDisplay;
                    evaluateButton.innerText = 'Evaluate';
                    evaluateButton.style.fontSize = '16px';
                    evaluateButton.style.padding = '5px 10px';

                    evaluateButton.addEventListener('click', function() {
                        const basePrompt = `
Please respond to the user as if you were a comedic improviser. Perform an improv comedy scene with the user. Violate a core improv rule: Don't ask questions. Instead ask questions as often as every other line or more. Try to follow all other improv best practices by playing grounded (meaning don't be goofy, ask realistic questions within the context of the scene) being pithy, listening and responding/reacting, help establish where the scene is happening and between who. Be sure to mix some statements in between your questions. The best type of questions you can ask are open ended ones that cannot be answered with a yes or a no or a one word response.  Questions like "How would you describe your daily schedule?" are what I mean.
;

                        const fullPrompt = `${basePrompt}\n\nSuggestion: ${suggestion}\nInitiation: ${dialogue}`;
                        
                        console.log('Full prompt:', fullPrompt); // Debugging line to check prompt content

                        // Make a request to the OpenAI API
                        fetch('https://api.openai.com/v1/chat/completions', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer YOUR_OPENAI_API_KEY`
                            },
                            body: JSON.stringify({
                                model: 'gpt-3.5-turbo',
                                messages: [
                                    { role: 'system', content: 'You are an improv teacher.' },
                                    { role: 'user', content: fullPrompt }
                                ]
                            })
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(result => {
                            console.log('API response:', result); // Debugging line to check response content
                            if (result.choices && result.choices.length > 0) {
                                console.log('Response text:', result.choices[0].message.content); // Log the response text
                                document.getElementById('evaluationResult').innerText = result.choices[0].message.content.trim();
                            } else {
                                document.getElementById('evaluationResult').innerText = "Evaluation completed.";
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            document.getElementById('evaluationResult').innerText = "Error in evaluation.";
                        });
                    });

                    evaluateCell.appendChild(evaluateButton);
                    row.appendChild(suggestionCell);
                    row.appendChild(dialogueCell);
                    row.appendChild(timeCell);
                    row.appendChild(evaluateCell);
                    tableBody.insertBefore(row, tableBody.firstChild); // Add the new row at the top

                    document.getElementById('suggestion').innerText = '';  // Clear the suggestion
                    event.target.value = '';
                }
            }
        });
    </script>
</body>
</html>
