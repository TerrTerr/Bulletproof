<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Improv Comedy Scene</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 80%;
            max-width: 800px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .header {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            text-align: center;
        }
        .header .title {
            font-size: 55px;
            font-family: 'Poppins', sans-serif;
            font-weight: bold;
            text-decoration: underline;
        }
        .content {
            display: flex;
            width: 100%;
            margin-top: 20px;
        }
        .content .image {
            flex-shrink: 0;
        }
        .content .details {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            margin-left: 20px;
        }
        .content .description {
            font-size: 24px;
            margin-bottom: 10px;
            font-style: italic;
        }
        .content .buttons {
            display: flex;
            flex-direction: column;
        }
        .content .buttons img {
            width: 50px;
            height: 50px;
            border-radius: 10px;
        }
        .content .buttons-container {
            display: flex;
            margin-top: 10px;
        }
        .content .buttons-container button {
            font-size: 18px;
            padding: 15px 30px;
            border: none;
            color: white;
            cursor: pointer;
            margin: 10px;
            border-radius: 5px;
        }
        #suggestionButton {
            background-color: green;
            padding: 15px 30px; /* 50% larger */
        }
        #newSceneButton {
            background-color: red;
            padding: 15px 30px; /* Same size as Suggestion button */
        }
        #suggestion {
            font-size: 24px;
            margin-top: 20px;
            text-align: center;
        }
        #chat-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            height: 400px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #fafafa;
            width: 100%;
        }
        .message {
            border-radius: 20px;
            padding: 10px 15px;
            margin: 5px 0;
            max-width: 75%;
            word-wrap: break-word;
            font-size: 18px;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
        }
        .assistant-message {
            background-color: #00ffff;
            color: black;
            align-self: flex-start;
        }
        #user-input-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 10px;
            width: 100%;
        }
        #user-input {
            width: 100%;
            padding: 10px;
            font-size: 18px;
            border: 1px solid #ccc;
            border-radius: 20px;
            margin-bottom: 10px;
        }
        #buttons-container {
            display: flex;
            justify-content: center;
            width: 100%;
        }
        #send-button, #button-button {
            padding: 10px;
            font-size: 18px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            margin: 5px;
        }
        #send-button {
            background-color: #007bff;
            color: white;
        }
        #button-button {
            background-color: red;
            color: white;
        }
        .toggle-container {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 20px;
        }
        .toggle-buttons {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
        .toggle-buttons label {
            cursor: pointer;
            padding: 10px 20px;
            border: 1px solid #ccc;
            margin-bottom: 5px;
            border-radius: 5px;
            font-size: 18px;
        }
        .toggle-buttons input[type="checkbox"] {
            display: none;
        }
        .toggle-buttons input[type="checkbox"]:checked + label {
            background-color: blue;
            color: white;
        }
        #download-button {
            background-color: #3b5998;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            margin-top: 20px;
        }
        #download-container {
            display: none; /* Hide the download container from view */
        }
        #download-container a {
            color: blue;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
</head>
<body>
    <div class="container" id="scene-container">
        <div class="header">
            <div class="title">Questioning Carol</div>
        </div>
        <div class="content">
            <div class="image">
                <img src="https://raw.githubusercontent.com/TerrTerr/Bulletproof/main/Questioning%20Carol%20Headshot.png" alt="Questioning Carol">
            </div>
            <div class="details">
                <div class="description">
                    Carol is an improviser who asks a lot of questions. If you can do a good scene with Carol then you can do a good one at your next improv audition no matter how many questions your scene partner asks you!
                </div>
                <div class="toggle-container">
                    <div class="toggle-buttons">
                        <input type="checkbox" id="userToggle" checked>
                        <label for="userToggle">You Initiate</label>
                        <input type="checkbox" id="carolToggle">
                        <label for="carolToggle">Questioning Carol Initiates</label>
                    </div>
                </div>
                <div class="buttons-container">
                    <button id="suggestionButton">Suggestion</button>
                    <button id="newSceneButton">Wipe</button>
                </div>
            </div>
        </div>
        <p id="suggestion"></p>
        <div id="chat-container"></div>
        <div id="user-input-container">
            <input type="text" id="user-input" placeholder="Type your dialogue here...">
            <div id="buttons-container">
                <button id="send-button">Send</button>
                <button id="button-button">Button</button>
            </div>
        </div>
        <div>
            <button id="download-button">Download My Scene</button>
        </div>
    </div>

    <div id="download-container">
        <p>An improv scene with Questioning Carol</p>
        <p id="download-suggestion"></p>
        <div id="download-chat"></div>
        <p>Improvised @ <a href="https://www.radicalagreement.com/">The Radical Agreement Project</a></p>
    </div>

    <script>
        let suggestions = [];
        let initialPrompt;
        let startTime;
        let isPendingResponse = false; // Flag to check pending response

        document.addEventListener('DOMContentLoaded', function() {
            fetch('https://raw.githubusercontent.com/TerrTerr/Initiation_Practice2/main/suggestions.csv')
                .then(response => response.text())
                .then(data => {
                    suggestions = data.split('\n').slice(1).map(line => line.trim());
                })
                .catch(error => console.error('Error fetching suggestions:', error));
        });

        document.getElementById('suggestionButton').addEventListener('click', function() {
            if (suggestions.length > 0) {
                const randomIndex = Math.floor(Math.random() * suggestions.length);
                const suggestion = suggestions[randomIndex];
                document.getElementById('suggestion').innerText = suggestion.charAt(0).toUpperCase() + suggestion.slice(1);
                document.getElementById('download-suggestion').innerText = suggestion.charAt(0).toUpperCase() + suggestion.slice(1);
                initialPrompt = `You are an improv character in a comedy scene. Your role is to ask questions as often as every other line or more. Follow all other improv best practices by playing grounded, being pithy, listening and responding/reacting, helping establish where the scene is happening and between who. Mix some statements in between your questions. The best questions are open-ended. Begin the conversation with an open-ended question. Respond only with your side of the conversation, provide only one line of dialogue at a time, and limit your response to one sentence. Here is the suggestion: ${suggestion}`;
                startTime = new Date();

                if (document.getElementById('carolToggle').checked) {
                    sendMessage(suggestion, false);
                }
            } else {
                console.log('No suggestions available');
            }
        });

        document.getElementById('newSceneButton').addEventListener('click', function() {
            document.getElementById('chat-container').innerHTML = '';
            document.getElementById('download-chat').innerHTML = '';
            document.getElementById('suggestion').innerText = '';
            document.getElementById('download-suggestion').innerText = '';
            document.getElementById('user-input').value = '';
        });

        const trimResponse = (response) => {
            response = response.replace(/\n/g, ' '); // Remove line breaks
            response = response.replace(/[^ ]+:/g, ''); // Remove words followed by colons
            const sentences = response.match(/[^.!?]+[.!?]+/g) || [response];
            if (sentences.length > 1) {
                return sentences[0];
            }
            return response;
        };

        const removeImprovWord = (text) => {
            return text.replace(/\bImprov\b/g, '');
        };

        const sendMessage = async (message, displayMessage = true) => {
            if (isPendingResponse) return; // Prevent sending if there's a pending response
            isPendingResponse = true; // Set flag to indicate a response is pending

            const chatContainer = document.getElementById('chat-container');
            const downloadChatContainer = document.getElementById('download-chat');
            if (displayMessage) {
                const userMessageElement = document.createElement('div');
                userMessageElement.className = 'message user-message';
                userMessageElement.innerText = message;
                chatContainer.appendChild(userMessageElement);

                const userMessageElementClone = userMessageElement.cloneNode(true);
                downloadChatContainer.appendChild(userMessageElementClone);
            }

            try {
                const response = await fetch('https://improvaise.glitch.me/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: initialPrompt + "\nUser: " + message })
                });

                const data = await response.json();
                let assistantMessage = data.choices[0].message.content.replace('Assistant: ', '');
                assistantMessage = trimResponse(assistantMessage);
                assistantMessage = removeImprovWord(assistantMessage);

                const assistantMessageElement = document.createElement('div');
                assistantMessageElement.className = 'message assistant-message';
                assistantMessageElement.innerText = assistantMessage;
                chatContainer.appendChild(assistantMessageElement);

                const assistantMessageElementClone = assistantMessageElement.cloneNode(true);
                downloadChatContainer.appendChild(assistantMessageElementClone);

                chatContainer.scrollTop = chatContainer.scrollHeight;
            } catch (error) {
                console.error('Error sending message:', error);
            } finally {
                isPendingResponse = false; // Reset flag after response is handled
            }
        };

        document.getElementById('send-button').addEventListener('click', () => {
            const userMessage = document.getElementById('user-input').value;
            if (!userMessage) return;
            document.getElementById('user-input').value = '';
            sendMessage(userMessage);
        });

        document.getElementById('button-button').addEventListener('click', () => {
            const userMessage = document.getElementById('user-input').value;
            if (!userMessage) return;
            document.getElementById('user-input').value = '';

            const chatContainer = document.getElementById('chat-container');
            const downloadChatContainer = document.getElementById('download-chat');

            const userMessageElement = document.createElement('div');
            userMessageElement.className = 'message user-message';
            userMessageElement.innerText = userMessage;
            chatContainer.appendChild(userMessageElement);

            const userMessageElementClone = userMessageElement.cloneNode(true);
            downloadChatContainer.appendChild(userMessageElementClone);

            chatContainer.scrollTop = chatContainer.scrollHeight;
        });

        document.getElementById('user-input').addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                document.getElementById('send-button').click();
            }
        });

        document.getElementById('userToggle').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('carolToggle').checked = false;
            } else {
                document.getElementById('carolToggle').checked = true;
            }
        });

        document.getElementById('carolToggle').addEventListener('change', function() {
            if (this.checked) {
                document.getElementById('userToggle').checked = false;
            } else {
                document.getElementById('userToggle').checked = true;
            }
        });

        document.getElementById('download-button').addEventListener('click', function() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            const suggestion = document.getElementById('download-suggestion').innerText;
            const chatMessages = Array.from(document.getElementById('download-chat').children);
            const footer = 'Improvised @ The Radical Agreement Project';
            const url = 'https://www.radicalagreement.com/';

            // Set up the document
            doc.setFont("Courier");
            doc.setFontSize(24);
            doc.setFont(undefined, "bold");
            doc.text(`THE ${suggestion.toUpperCase()} SCENE`, doc.internal.pageSize.getWidth() / 2, 20, {align: "center"});
            doc.setFontSize(12);
            doc.setFont(undefined, "normal");

            let yOffset = 40;

            doc.setFont("Courier", "bold");
            doc.text(`Suggestion: ${suggestion}`, doc.internal.pageSize.getWidth() / 2, yOffset, {align: "center"});
            yOffset += 20;

            // Add chat messages with consistent spacing and increased margins
            const margin = 20; // Double the margin size
            chatMessages.forEach((message, index) => {
                const text = message.classList.contains('user-message') ? `USER: ${message.innerText}` : `QUESTIONING CAROL: ${message.innerText}`;
                const cleanedText = removeImprovWord(text);
                const lines = doc.splitTextToSize(cleanedText, doc.internal.pageSize.getWidth() - 2 * margin);
                doc.text(lines, margin, yOffset);
                yOffset += lines.length * 10 + 5; // Added consistent spacing

                // Check for page overflow
                if (yOffset > doc.internal.pageSize.getHeight() - 20) {
                    doc.addPage();
                    yOffset = 20;
                }
            });

            // Add footer
            doc.setTextColor(0, 0, 255);
            doc.textWithLink(footer, 10, doc.internal.pageSize.getHeight() - 10, {url: url});
            doc.setTextColor(0, 0, 0);

            const fileName = `${suggestion.replace(/\s+/g, '_')}_scene.pdf`;
            doc.save(fileName);
        });
    </script>
</body>
</html>


