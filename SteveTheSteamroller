<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Improv Comedy Scene</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap');
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            margin: 0;
            padding-top: 20px;
        }
        .container {
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 80%;
            max-width: 800px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 20px;
        }
        .content {
            display: flex;
            width: 100%;
            flex-direction: column;
            align-items: center;
            margin-top: 20px;
        }
        .buttons-container {
            display: flex;
            justify-content: center;
            margin-top: 10px;
        }
        .buttons-container button {
            font-size: 18px;
            padding: 15px 30px;
            border: none;
            color: white;
            cursor: pointer;
            margin: 10px;
            border-radius: 5px;
        }
        #suggestionButton {
            background-color: green;
            padding: 15px 30px;
        }
        #suggestion {
            font-size: 24px;
            margin-top: 20px;
            text-align: center;
        }
        #chat-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            height: 400px;
            overflow-y: auto;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 10px;
            background-color: #fafafa;
            width: 100%;
        }
        .message {
            border-radius: 20px;
            padding: 10px 15px;
            margin: 5px 0;
            max-width: 75%;
            word-wrap: break-word;
            font-size: 18px;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            align-self: flex-end;
        }
        .assistant-message {
            background-color: #00ffff;
            color: black;
            align-self: flex-start;
        }
        #user-input-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-top: 10px;
            width: 100%;
        }
        #user-input {
            width: 100%;
            padding: 10px;
            font-size: 18px;
            border: 1px solid #ccc;
            border-radius: 20px;
            margin-bottom: 10px;
        }
        #buttons-container {
            display: flex;
            justify-content: center;
            width: 100%;
        }
        #send-button, #button-button, #wipeButton {
            padding: 10px;
            font-size: 18px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            margin: 5px;
        }
        #send-button {
            background-color: #007bff;
            color: white;
        }
        #button-button {
            background-color: green;
            color: white;
        }
        #wipeButton {
            background-color: red;
            color: white;
        }
        .toggle-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }
        .toggle-buttons {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .toggle-buttons label {
            cursor: pointer;
            padding: 10px 20px;
            border: 1px solid #ccc;
            margin-bottom: 5px;
            border-radius: 5px;
            font-size: 18px;
        }
        .toggle-buttons input[type="checkbox"] {
            display: none;
        }
        .toggle-buttons input[type="checkbox"]:checked + label {
            background-color: blue;
            color: white;
        }
        #download-button {
            background-color: #3b5998;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            margin-top: 20px;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
</head>
<body>
    <div class="container" id="scene-container">
        <div class="content">
            <div class="toggle-container">
                <div class="toggle-buttons">
                    <input type="checkbox" id="userToggle" checked>
                    <label for="userToggle" title="Initiate the scene yourself.">You Initiate</label>
                    <input type="checkbox" id="steveToggle">
                    <label for="steveToggle" title="Steve The Steamroller initiates the scene once there is a suggestion.">Steve The Steamroller Initiates</label>
                </div>
            </div>
            <div class="buttons-container">
                <button id="suggestionButton" title="Click to get a random suggestion.">Suggestion</button>
            </div>
        </div>
        <p id="suggestion"></p>
        <p style="margin-top: 5px; text-align: center; font-size: 14px; color: blue;">
            Allow 30 seconds before first response from app.
        </p>
        <div id="chat-container"></div>
        <div id="user-input-container">
            <input type="text" id="user-input" placeholder="Type your dialogue here..." title="Type your dialogue here and then click 'Send'.">
            <div id="buttons-container">
                <button id="send-button" title="Send your dialogue to Steve The Steamroller for response.">Send</button>
                <button id="button-button" title="End your scene by putting a button on it.">Button</button>
                <button id="wipeButton" title="Wipe your scene so you can start a new one.">Wipe</button>
            </div>
            <p style="margin-top: 10px; text-align: center; font-size: 14px; color: blue;">
                Put actions / stage directions in parentheses.
            </p>
        </div>
    </div>
    <button id="download-button" title="Download the current scene as a PDF.">Download My Scene</button>
    <script>
        let suggestions = [];
        let initialPrompt;
        let startTime;
        let isPendingResponse = false;
        let unrelatedLine = '';

        const systemPrompt = `ACT LIKE an improv comedian playing a character named Steve in a comedy scene. Violate a core improv rule: Be a Steamroller. Cut off the user's contributions to the scene. Try to follow all other improv best practices by playing grounded (meaning don't be goofy), being pithy, listening and responding/reacting, and helping to establish where the scene is happening and between who. Remember you are playing Steve, not the USER, so never refer to the user as Steve. You may respond with up to two sentences.`;

        const fetchUnrelatedLine = async () => {
            try {
                const unrelatedPrompt = "Give me a completely unrelated line, something off-topic or random that has nothing to do with the current conversation.";
                const response = await fetch('https://improvaise-3point5-turbo.glitch.me/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: unrelatedPrompt })
                });
                const data = await response.json();
                unrelatedLine = data.choices[0].message.content.trim();
                console.log("Unrelated Line Selected:", unrelatedLine); // Log the unrelated line
                return unrelatedLine;
            } catch (error) {
                console.error('Error fetching unrelated line:', error);
                return "Did you know that koalas sleep for 18 hours a day?"; // Fallback line in case of error
            }
        };

        const addUnrelatedLineToScene = (scene) => {
            return `${unrelatedLine}\n${scene}`;
        };

        document.addEventListener('DOMContentLoaded', function() {
            fetch('https://raw.githubusercontent.com/TerrTerr/Initiation_Practice2/main/suggestions.csv')
                .then(response => response.text())
                .then(data => {
                    suggestions = data.split('\n').slice(1).map(line => line.trim());
                })
                .catch(error => console.error('Error fetching suggestions:', error));

            document.getElementById('suggestionButton').addEventListener('click', async function() {
                if (suggestions.length > 0) {
                    const randomIndex = Math.floor(Math.random() * suggestions.length);
                    const suggestion = suggestions[randomIndex];
                    document.getElementById('suggestion').innerText = suggestion.charAt(0).toUpperCase() + suggestion.slice(1);
                    initialPrompt = `ACT LIKE an improv comedian playing a character named Steve in a comedy scene. Violate a core improv rule: Be a Steamroller. Cut off the user's contributions to the scene. Try to follow all other improv best practices by playing grounded (meaning don't be goofy), being pithy, listening and responding/reacting, and helping to establish where the scene is happening and between who. Here is the suggestion: ${suggestion}`;
                    startTime = new Date();
                    if (document.getElementById('steveToggle').checked) {
                        unrelatedLine = await fetchUnrelatedLine(); // Fetch and store the unrelated line
                        sendMessage("", false, true); // Steve initiates with unrelated line on second message
                    }
                } else {
                    console.log('No suggestions available');
                }
            });

            document.getElementById('wipeButton').addEventListener('click', function() {
                document.getElementById('chat-container').innerHTML = '';
                document.getElementById('suggestion').innerText = '';
                document.getElementById('user-input').value = '';
                unrelatedLine = ''; // Reset unrelated line when wiping the scene
            });

            const trimResponse = (response) => {
                response = response.replace(/\n/g, ' ');
                response = response.replace(/[^ ]+:/g, '');
                const sentences = response.match(/[^.!?]+[.!?]+/g) || [response];
                if (sentences.length > 2) {
                    return sentences.slice(0, 2).join(' ');
                }
                return response;
            };

            const removeImprovWord = (text) => {
                return text.replace(/\bImprov\b/g, '');
            };

            const replaceUserWord = (text) => {
                text = text.replace(/\bthe USER\b/gi, 'you');
                text = text.replace(/\bUSER\b/g, (match, offset, string) => {
                    if (offset === 0 || string[offset - 2] === '.' || string[offset - 2] === '!' || string[offset - 2] === '?') {
                        return 'You';
                    }
                    return '';
                });
                return text;
            };

            const removeSteve = (text) => {
                let modifiedText = text.replace(/\bSteve\b/g, '');
                modifiedText = modifiedText.replace(/\s{2,}/g, ' ').trim();
                modifiedText = modifiedText.replace(/\s,|,\s/g, ',').replace(/,\s,/g, ',');
                modifiedText = modifiedText.replace(/(^\s*\w|(?<=[.?!]\s)\s*\w)/g, function(c) {
                    return c.toUpperCase();
                });
                return modifiedText;
            };

            const applyWordReduction = (text) => {
                const words = text.split(' ');
                const maxWordsToKeep = Math.floor(Math.random() * 6) + 10;
                if (words.length > maxWordsToKeep) {
                    return words.slice(0, maxWordsToKeep).join(' ') + '...';
                }
                return text;
            };

            const sendMessage = async (message, displayMessage = true, isSteveInitiation = false) => {
                if (isPendingResponse) return;
                isPendingResponse = true;

                const chatContainer = document.getElementById('chat-container');
                if (displayMessage) {
                    const reducedMessage = applyWordReduction(message);
                    const userMessageElement = document.createElement('div');
                    userMessageElement.className = 'message user-message';
                    userMessageElement.innerText = reducedMessage;
                    chatContainer.appendChild(userMessageElement);
                }

                let scene = Array.from(document.getElementById('chat-container').children).map(div => div.innerText).join('\n');
                let nextPrompt = scene;

                if (isSteveInitiation && unrelatedLine) {
                    nextPrompt = addUnrelatedLineToScene(nextPrompt); // Add unrelated line to the scene
                }

                try {
                    const response = await fetch('https://improvaise-3point5-turbo.glitch.me/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: `${systemPrompt}\n${nextPrompt}` })
                    });
                    const data = await response.json();
                    let assistantMessage = data.choices[0].message.content.replace('Assistant: ', '');
                    assistantMessage = trimResponse(assistantMessage);
                    assistantMessage = removeImprovWord(assistantMessage);
                    assistantMessage = replaceUserWord(assistantMessage);
                    assistantMessage = removeSteve(assistantMessage);

                    const assistantMessageElement = document.createElement('div');
                    assistantMessageElement.className = 'message assistant-message';
                    assistantMessageElement.innerText = assistantMessage;
                    chatContainer.appendChild(assistantMessageElement);
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                } catch (error) {
                    console.error('Error sending message:', error);
                } finally {
                    isPendingResponse = false;
                }

                document.getElementById('user-input').focus();
            };

            document.getElementById('send-button').addEventListener('click', () => {
                const userMessage = document.getElementById('user-input').value;
                if (!userMessage) return;
                document.getElementById('user-input').value = '';
                sendMessage(userMessage);
            });

            document.getElementById('button-button').addEventListener('click', () => {
                const userMessage = document.getElementById('user-input').value;
                if (!userMessage) return;
                document.getElementById('user-input').value = '';
                const chatContainer = document.getElementById('chat-container');
                const userMessageElement = document.createElement('div');
                userMessageElement.className = 'message user-message';
                userMessageElement.innerText = userMessage;
                chatContainer.appendChild(userMessageElement);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            });

            document.getElementById('user-input').addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    document.getElementById('send-button').click();
                }
            });

            document.getElementById('userToggle').addEventListener('change', function() {
                if (this.checked) {
                    document.getElementById('steveToggle').checked = false;
                } else {
                    document.getElementById('steveToggle').checked = true;
                }
            });

            document.getElementById('steveToggle').addEventListener('change', function() {
                if (this.checked) {
                    document.getElementById('userToggle').checked = false;
                } else {
                    document.getElementById('userToggle').checked = true;
                }
            });

            document.getElementById('download-button').addEventListener('click', function() {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                const suggestionElement = document.getElementById('suggestion');
                const chatContainerElement = document.getElementById('chat-container');

                if (!suggestionElement || !chatContainerElement) {
                    console.error('Required elements not found in the DOM.');
                    return;
                }

                const suggestion = suggestionElement.innerText;
                const chatMessages = Array.from(chatContainerElement.children);
                const header = `THE IMPROVISED ${suggestion.toUpperCase()} SCENE`;

                const margin = 25;
                const pageWidth = doc.internal.pageSize.getWidth();
                const pageHeight = doc.internal.pageSize.getHeight();

                doc.setFont("Courier");
                doc.setFontSize(30);
                doc.setFont(undefined, "bold");

                const titleLines = doc.splitTextToSize(header, pageWidth - 2 * margin);
                const titleLineHeight = 10;
                const titleStartY = 20;
                titleLines.forEach((line, index) => {
                    doc.text(line, pageWidth / 2, titleStartY + index * titleLineHeight, { align: "center" });
                });
                const titleEndY = titleStartY + (titleLines.length - 1) * titleLineHeight;
                const underlineY = titleEndY + 1.5;
                doc.setLineWidth(1);
                doc.line(margin, underlineY, pageWidth - margin, underlineY);

                doc.setFontSize(16);

                let yOffset = underlineY + 25;

                const footerY = underlineY + 5;

                const addFooter = (doc, pageWidth, footerY) => {
                    doc.setTextColor(0, 0, 255);
                    doc.textWithLink("Created @ The Radical Agreement Project", margin, footerY, { url: "https://www.radicalagreement.com/" });
                    doc.setTextColor(0, 0, 0);
                };

                let pageCount = 1;

                chatMessages.forEach((message) => {
                    const speaker = message.classList.contains('user-message') ? 'USER' : 'STEVE THE STEAMROLLER';
                    let cleanedText = message.innerText;

                    cleanedText = cleanedText.replace(/\*(.*?)\*/g, (_, p1) => `(${p1})`);

                    const lines = doc.splitTextToSize(cleanedText, pageWidth - 2 * margin);

                    doc.setFont("Courier", "bold");
                    doc.text(speaker, pageWidth / 2, yOffset, { align: "center" });
                    yOffset += 10;
                    doc.setFont("Courier", "normal");

                    lines.forEach((line) => {
                        doc.text(line, margin, yOffset);
                        yOffset += 10;
                    });
                    yOffset += 5;

                    if (yOffset > pageHeight - 40) {
                        if (pageCount === 1) {
                            addFooter(doc, pageWidth, footerY);
                        }
                        doc.addPage();
                        yOffset = 20;
                        pageCount++;
                    }
                });

                if (pageCount === 1) {
                    addFooter(doc, pageWidth, footerY);
                }

                const fileName = `The_Improvised_${suggestion.replace(/\s+/g, '_')}_Scene.pdf`;
                doc.save(fileName);
            });
        });
    </script>
</body>
</html>

